-module(mandel).

-export([run/0]).

-define(Mult(X0, X1, Y0, Y1), {X0 * Y0 - X1 * Y1,  X0 * Y1 + Y0 * X1}).
-define(Sum(X0, X1, Y0, Y1), {X0 + Y0,  X1 + Y1}).
-define(Norma(Z0, Z1), Z0 * Z0 + Z1 * Z1). 

-record(
   mandel,
   {
		size,
		delta,
		max_complex = 2,
		max_iter = 100,
		max_colors = 2000,
		bailout2 = 4	
	}
).

run() ->
	Size = 10,
	Image = calculate_image(Size),	
	io:format("~p~n",[Image]).

calculate_image (Size) ->
	[ calculate_pixel(Size, X, Y) || X <- lists:seq(1, Size), Y <- lists:seq(1, Size)].


calculate_pixel(Mandel, X, Y) ->
	Size2 = Mandel#mandel.size / 2,
	Ix = (X - Size2) * Mandel#mandel.delta / 8 - 0.5,
	Iy = (Y - Size2) * Mandel#mandel.delta / 8 + 0.5,
	Iters = calculate_complex(Mandel, Ix, Iy),
	Iters rem Mandel#mandel.max_colors.

calculate_complex (Mandel, Ix, Iy) ->
	C = {Ix, Iy},
	calculate_complex_loop (C, Mandel).
	
calculate_complex_loop (C, Mandel) ->
	calculate_complex_loop (C, {0, 0}, 0, 0, Mandel#mandel.max_iter, Mandel#mandel.bailout2).
																					 
calculate_complex_loop (C, Z, Iter, Norma, MaxIter, Bailout) when Iter > MaxIter orelse Norma > Bailout ->
	Iter;
calculate_complex_loop (C = {C0, C1}, {Z0, Z1}, Iter, Norma, MaxIter, Bailout) ->
	{M1, M2} = ?Mult(Z0, Z1, Z0, Z1),
	Z2 = ?Sum (M1, M2, C0, C1),
	Norma2 = ?Norma(Z0, Z1),
	calculate_complex_loop (C, Z2, Iter + 1, Norma2, MaxIter, Bailout).